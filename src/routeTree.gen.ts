/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as PublicRouteImport } from "./routes/_public";
import { Route as PrivateRouteImport } from "./routes/_private";
import { Route as PublicIndexRouteImport } from "./routes/_public/index";
import { Route as PrivateSettingsRouteImport } from "./routes/_private/settings";
import { Route as PrivateRssManagerRouteImport } from "./routes/_private/rss-manager";
import { Route as PrivateKeywordsRouteImport } from "./routes/_private/keywords";
import { Route as PrivateDashboardArticlesRouteImport } from "./routes/_private/dashboard/articles";
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$";

const rootServerRouteImport = createServerRootRoute();

const PublicRoute = PublicRouteImport.update({
  id: "/_public",
  getParentRoute: () => rootRouteImport,
} as any);
const PrivateRoute = PrivateRouteImport.update({
  id: "/_private",
  getParentRoute: () => rootRouteImport,
} as any);
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => PublicRoute,
} as any);
const PrivateSettingsRoute = PrivateSettingsRouteImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateRssManagerRoute = PrivateRssManagerRouteImport.update({
  id: "/rss-manager",
  path: "/rss-manager",
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateKeywordsRoute = PrivateKeywordsRouteImport.update({
  id: "/keywords",
  path: "/keywords",
  getParentRoute: () => PrivateRoute,
} as any);
const PrivateDashboardArticlesRoute =
  PrivateDashboardArticlesRouteImport.update({
    id: "/dashboard/articles",
    path: "/dashboard/articles",
    getParentRoute: () => PrivateRoute,
  } as any);
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/keywords": typeof PrivateKeywordsRoute;
  "/rss-manager": typeof PrivateRssManagerRoute;
  "/settings": typeof PrivateSettingsRoute;
  "/": typeof PublicIndexRoute;
  "/dashboard/articles": typeof PrivateDashboardArticlesRoute;
}
export interface FileRoutesByTo {
  "/keywords": typeof PrivateKeywordsRoute;
  "/rss-manager": typeof PrivateRssManagerRoute;
  "/settings": typeof PrivateSettingsRoute;
  "/": typeof PublicIndexRoute;
  "/dashboard/articles": typeof PrivateDashboardArticlesRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_private": typeof PrivateRouteWithChildren;
  "/_public": typeof PublicRouteWithChildren;
  "/_private/keywords": typeof PrivateKeywordsRoute;
  "/_private/rss-manager": typeof PrivateRssManagerRoute;
  "/_private/settings": typeof PrivateSettingsRoute;
  "/_public/": typeof PublicIndexRoute;
  "/_private/dashboard/articles": typeof PrivateDashboardArticlesRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/keywords"
    | "/rss-manager"
    | "/settings"
    | "/"
    | "/dashboard/articles";
  fileRoutesByTo: FileRoutesByTo;
  to: "/keywords" | "/rss-manager" | "/settings" | "/" | "/dashboard/articles";
  id:
    | "__root__"
    | "/_private"
    | "/_public"
    | "/_private/keywords"
    | "/_private/rss-manager"
    | "/_private/settings"
    | "/_public/"
    | "/_private/dashboard/articles";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren;
  PublicRoute: typeof PublicRouteWithChildren;
}
export interface FileServerRoutesByFullPath {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
}
export interface FileServerRoutesByTo {
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  "/api/auth/$": typeof ApiAuthSplatServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths: "/api/auth/$";
  fileServerRoutesByTo: FileServerRoutesByTo;
  to: "/api/auth/$";
  id: "__root__" | "/api/auth/$";
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_public": {
      id: "/_public";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PublicRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_private": {
      id: "/_private";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof PrivateRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_public/": {
      id: "/_public/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof PublicIndexRouteImport;
      parentRoute: typeof PublicRoute;
    };
    "/_private/settings": {
      id: "/_private/settings";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof PrivateSettingsRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/rss-manager": {
      id: "/_private/rss-manager";
      path: "/rss-manager";
      fullPath: "/rss-manager";
      preLoaderRoute: typeof PrivateRssManagerRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/keywords": {
      id: "/_private/keywords";
      path: "/keywords";
      fullPath: "/keywords";
      preLoaderRoute: typeof PrivateKeywordsRouteImport;
      parentRoute: typeof PrivateRoute;
    };
    "/_private/dashboard/articles": {
      id: "/_private/dashboard/articles";
      path: "/dashboard/articles";
      fullPath: "/dashboard/articles";
      preLoaderRoute: typeof PrivateDashboardArticlesRouteImport;
      parentRoute: typeof PrivateRoute;
    };
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

interface PrivateRouteChildren {
  PrivateKeywordsRoute: typeof PrivateKeywordsRoute;
  PrivateRssManagerRoute: typeof PrivateRssManagerRoute;
  PrivateSettingsRoute: typeof PrivateSettingsRoute;
  PrivateDashboardArticlesRoute: typeof PrivateDashboardArticlesRoute;
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateKeywordsRoute: PrivateKeywordsRoute,
  PrivateRssManagerRoute: PrivateRssManagerRoute,
  PrivateSettingsRoute: PrivateSettingsRoute,
  PrivateDashboardArticlesRoute: PrivateDashboardArticlesRoute,
};

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren);

interface PublicRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute;
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
};

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
